/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.10.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Batch, DenomResponse, Addr, Edge, ExecuteMsg, InstantiateMsg, Network, QueryMsg } from "./Obligatto2.types";
export interface Obligatto2Message {
  contractAddress: string;
  sender: string;
  createEdge: ({
    amount,
    creditor
  }: {
    amount: number;
    creditor: Addr;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  editEdge: ({
    amount,
    creditor,
    edgeId
  }: {
    amount: number;
    creditor: Addr;
    edgeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeEdge: ({
    edgeId
  }: {
    edgeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createGraph: ({
    graph
  }: {
    graph: Edge[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createGraphSimplified: ({
    graph,
    graphId
  }: {
    graph: Addr[][];
    graphId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  editGraphSimplified: ({
    graph,
    graphId
  }: {
    graph: Addr[][];
    graphId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeGraph: ({
    graphId
  }: {
    graphId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateEdges: ({
    edges
  }: {
    edges: number[][];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  findSavings: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  findSavingsInAGraph: ({
    graphId
  }: {
    graphId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  reset: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  saveNetworkToFile: ({
    filepath
  }: {
    filepath: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createGraphFromFile: ({
    filepath
  }: {
    filepath: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  applySetOffFromFile: ({
    filepath
  }: {
    filepath: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class Obligatto2MessageComposer implements Obligatto2Message {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createEdge = this.createEdge.bind(this);
    this.editEdge = this.editEdge.bind(this);
    this.removeEdge = this.removeEdge.bind(this);
    this.createGraph = this.createGraph.bind(this);
    this.createGraphSimplified = this.createGraphSimplified.bind(this);
    this.editGraphSimplified = this.editGraphSimplified.bind(this);
    this.removeGraph = this.removeGraph.bind(this);
    this.updateEdges = this.updateEdges.bind(this);
    this.findSavings = this.findSavings.bind(this);
    this.findSavingsInAGraph = this.findSavingsInAGraph.bind(this);
    this.reset = this.reset.bind(this);
    this.saveNetworkToFile = this.saveNetworkToFile.bind(this);
    this.createGraphFromFile = this.createGraphFromFile.bind(this);
    this.applySetOffFromFile = this.applySetOffFromFile.bind(this);
  }

  createEdge = ({
    amount,
    creditor
  }: {
    amount: number;
    creditor: Addr;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_edge: {
            amount,
            creditor
          }
        })),
        funds
      })
    };
  };
  editEdge = ({
    amount,
    creditor,
    edgeId
  }: {
    amount: number;
    creditor: Addr;
    edgeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          edit_edge: {
            amount,
            creditor,
            edge_id: edgeId
          }
        })),
        funds
      })
    };
  };
  removeEdge = ({
    edgeId
  }: {
    edgeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_edge: {
            edge_id: edgeId
          }
        })),
        funds
      })
    };
  };
  createGraph = ({
    graph
  }: {
    graph: Edge[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_graph: {
            graph
          }
        })),
        funds
      })
    };
  };
  createGraphSimplified = ({
    graph,
    graphId
  }: {
    graph: Addr[][];
    graphId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_graph_simplified: {
            graph,
            graph_id: graphId
          }
        })),
        funds
      })
    };
  };
  editGraphSimplified = ({
    graph,
    graphId
  }: {
    graph: Addr[][];
    graphId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          edit_graph_simplified: {
            graph,
            graph_id: graphId
          }
        })),
        funds
      })
    };
  };
  removeGraph = ({
    graphId
  }: {
    graphId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_graph: {
            graph_id: graphId
          }
        })),
        funds
      })
    };
  };
  updateEdges = ({
    edges
  }: {
    edges: number[][];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_edges: {
            edges
          }
        })),
        funds
      })
    };
  };
  findSavings = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          find_savings: {}
        })),
        funds
      })
    };
  };
  findSavingsInAGraph = ({
    graphId
  }: {
    graphId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          find_savings_in_a_graph: {
            graph_id: graphId
          }
        })),
        funds
      })
    };
  };
  reset = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          reset: {}
        })),
        funds
      })
    };
  };
  saveNetworkToFile = ({
    filepath
  }: {
    filepath: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          save_network_to_file: {
            filepath
          }
        })),
        funds
      })
    };
  };
  createGraphFromFile = ({
    filepath
  }: {
    filepath: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_graph_from_file: {
            filepath
          }
        })),
        funds
      })
    };
  };
  applySetOffFromFile = ({
    filepath
  }: {
    filepath: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          apply_set_off_from_file: {
            filepath
          }
        })),
        funds
      })
    };
  };
}